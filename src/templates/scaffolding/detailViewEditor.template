<%  if (property.type == Boolean || property.type == boolean)
        out << renderBooleanEditor(domainClass, property)
    else if (property.type && Number.isAssignableFrom(property.type) || (property.type?.isPrimitive() && property.type != boolean))
        out << renderNumberEditor(domainClass, property)
    else if (property.type == String)
        out << renderStringEditor(domainClass, property)
    else if (property.type == Date || property.type == java.sql.Date || property.type == java.sql.Time || property.type == Calendar)
        out << renderDateEditor(domainClass, property)
    else if (property.type == URL)
        out << renderStringEditor(domainClass, property)
    else if (property.type && property.isEnum())
        out << renderEnumEditor(domainClass, property)
    else if (property.type == TimeZone)
        out << renderSelectTypeEditor("timeZone", domainClass, property)
    else if (property.type == Locale)
        out << renderSelectTypeEditor("locale", domainClass, property)
    else if (property.type == Currency)
        out << renderSelectTypeEditor("currency", domainClass, property)
    else if (property.type==([] as Byte[]).class) //TODO: Bug in groovy means i have to do this :(
        out << renderByteArrayEditor(domainClass, property)
    else if (property.type==([] as byte[]).class) //TODO: Bug in groovy means i have to do this :(
        out << renderByteArrayEditor(domainClass, property)
    else if (property.manyToOne || property.oneToOne)
        out << renderManyToOne(domainClass, property)
    else if ((property.oneToMany && !property.bidirectional) || property.manyToMany) {
        out << renderManyToMany(domainClass, property)
    }
    else if (property.oneToMany)
        out << renderOneToMany(domainClass, property)
    else
    	out << "//nothing"

    private renderEnumEditor(domainClass, property) {
		return """
				xtype : 'combo',
				store : ${(property.type.values()*.name()).collect{"'$it'"}}
			"""
    }

    private String renderStringEditor(domainClass, property) {
		return """
				xtype : 'textfield'
		"""
    }

    private renderByteArrayEditor(domainClass, property) {
        return """
				xtype : 'filefield'
			"""
    }

    private String renderManyToOne(domainClass,property) {
        if (property.association) {
			return  """
				xtype : 'combo',//ManyToOne
				valueField: 'id',
				displayField: 'uniqueName',
				store: {type:'${grails.util.GrailsNameUtils.getShortName(property.type).toLowerCase()}-liststore'},
			"""
        }else{
        	return "//renderManyToOne not association"
        }
    }

    private renderManyToMany(domainClass, property) {
    	return  """
		        xtype: 'tagfield',//ManyToMany
		        store: {type:'${grails.util.GrailsNameUtils.getShortName(property.getReferencedPropertyType()).toLowerCase()}-liststore'},
		        displayField: 'uniqueName',
		        valueField: 'id'
		/*	
		        xtype: 'multiselector',
		        title: 'Yksuss',
		        bind:{
		        	store:{
		                bindTo:'{theDomainObject.yksuss}',//Not binding
		                deep:true
		        	}
	            },
		        fieldName: 'uniqueName',
		        viewConfig: {
		            deferEmptyText: false,
		            emptyText: 'No employees selected'
		        },
		        search: {
		            field: 'uniqueName',
		            store: {type:'${grails.util.GrailsNameUtils.getShortName(property.getReferencedPropertyType()).toLowerCase()}-liststore'},
		        }
		    */
			"""
    }

    private renderOneToMany(domainClass, property) {
    	return  """
				xtype : 'combo',//OneToMany
				valueField: 'id',
				displayField: 'uniqueName',
				multiSelect: true,
				store: {type:'${grails.util.GrailsNameUtils.getShortName(property.getReferencedPropertyType()).toLowerCase()}-liststore'},
			"""
    }

    private renderNumberEditor(domainClass, property) {

		String editorStrBegin ="xtype : 'numberfield'"
		String editorStrBetween = ""
		
		if (!cp) {
			if (property.type == Byte) {
				editorStrBetween += ", minValue: -128, maxValue: 127"
			}
		} else {
			if (cp.range) {
				return "xtype : 'combo', store : ${cp.range.from..cp.range.to}"
			} else if (cp.inList) {
				return "xtype : 'combo', store : ${(domainClass.constraints."${property.name}".inList).collect{"'$it'"}} "
			} else {
				if (property.type in [float, double, Float, Double, BigDecimal]) {
					//formatStr = ", format:'0.00'"
				}
				if (cp.min != null) editorStrBetween += ", minValue: ${cp.min}"
				if (cp.max != null) editorStrBetween += ", maxValue: ${cp.max}"
			}
			
		}
		return  editorStrBegin + editorStrBetween 
     }

    private renderBooleanEditor(domainClass, property) {
         return """
				xtype : 'checkbox'
			"""
    }

    private renderDateEditor(domainClass, property) {
         return """ 	
				xtype : 'datefield',
		 		format: 'Y-m-d',
			"""
    }

    private renderSelectTypeEditor(type, domainClass,property) {
		return """
				xtype : 'combo',
				store : []
			"""

    }

%>
